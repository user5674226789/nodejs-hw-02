openapi: 3.0.1
info:
  version: 1.0.0
  title: Contacts NodeJS
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: |
    Contacts NodeJS
servers:
  - url: http://localhost:3000
  - url: https://contacts-app-ndz9.onrender.com
tags:
  - name: auth
    description: Operations related to authentication
  - name: contacts
    description: Operations related to contacts
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      operationId: registerUser
      description: Register a new user with the provided details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: Successfully registered a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/IllegalInput'
        '409':
          description: Email in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/GeneralError'
  /auth/login:
    post:
      tags:
        - auth
      summary: Login a user
      operationId: loginUser
      description: Login a user with the provided credentials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
      responses:
        '200':
          description: Successfully logged in a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/IllegalInput'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/GeneralError'
  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout a user
      operationId: logoutUser
      description: Logout the currently authenticated user.
      responses:
        '204':
          description: Successfully logged out
        '400':
          $ref: '#/components/responses/IllegalInput'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/GeneralError'
  /auth/refresh:
    post:
      tags:
        - auth
      summary: Refresh user session
      operationId: refreshUserSession
      description: Refresh the session of the currently authenticated user.
      responses:
        '200':
          description: Successfully refreshed a session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/IllegalInput'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/GeneralError'
  /auth/send-reset-email:
    post:
      tags:
        - auth
      summary: Send password reset email
      operationId: sendResetEmail
      description: Send a password reset email to the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendResetEmailRequest'
      responses:
        '200':
          description: Reset password email has been successfully sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/GeneralError'
  /auth/reset-pwd:
    post:
      tags:
        - auth
      summary: Reset password
      operationId: resetPassword
      description: Reset the password of the user using the provided token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password has been successfully reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Token is expired or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/GeneralError'
  /contacts:
    get:
      tags:
        - contacts
      summary: Get list of contacts
      operationId: getContacts
      description: Get list of contacts with this endpoint
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          example: 1
        - in: query
          name: perPage
          schema:
            type: integer
            example: 10
        - in: query
          name: sortBy
          schema:
            type: string
            example: name
          description: All contact's fields can be mentioned. Default value - _id
        - in: query
          name: sortOrder
          schema:
            type: string
            enum:
              - asc
              - desc
            example: asc
        - in: query
          name: type
          schema:
            type: string
            enum:
              - work
              - home
              - personal
            example: personal
        - in: query
          name: isFavourite
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: Successfully found contacts!
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - message
                  - data
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found contacts!
                  data:
                    type: object
                    required:
                      - data
                      - page
                      - perPage
                      - totalItems
                      - totalPages
                      - hasNextPage
                      - hasPreviousPage
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/contact'
                      page:
                        type: number
                        example: 1
                      perPage:
                        type: number
                        example: 10
                      totalItems:
                        type: number
                        example: 100
                      totalPages:
                        type: number
                        example: 10
                      hasNextPage:
                        type: boolean
                        example: true
                      hasPreviousPage:
                        type: boolean
                        example: false
        '401':
          $ref: '#/components/responses/401'
    post:
      tags:
        - contacts
      summary: Create a new contact
      operationId: createContact
      description: Create a new contact with payload
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - phoneNumber
                - contactType
              properties:
                name:
                  description: Contact's name
                  type: string
                  example: John Doe
                phoneNumber:
                  description: Contact's phone number
                  type: string
                  example: '+1234567890'
                email:
                  description: Contact's email
                  type: string
                  example: john.doe@example.com
                isFavourite:
                  description: Whether the contact is a favourite
                  type: boolean
                  example: false
                contactType:
                  description: Contact's type
                  type: string
                  enum:
                    - work
                    - home
                    - personal
                photo:
                  description: Contact's photo
                  type: string
                  format: binary
      responses:
        '201':
          description: Creates a contact
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - message
                  - data
                properties:
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Successfully created a contact!
                  data:
                    type: object
                    $ref: '#/components/schemas/contact'
        '401':
          $ref: '#/components/responses/401'
  /contacts/{contactId}:
    get:
      tags:
        - contacts
      summary: Get a contact by ID
      operationId: getContactById
      description: Retrieve a specific contact by its unique ID.
      security:
        - bearerAuth: []
      parameters:
        - name: contactId
          in: path
          required: true
          description: ID of the contact to fetch
          schema:
            type: string
      responses:
        '200':
          description: Contact found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contact'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - contacts
      summary: Update a contact by ID
      operationId: updateContactById
      description: Update a specific contact by its unique ID.
      security:
        - bearerAuth: []
      parameters:
        - name: contactId
          in: path
          required: true
          description: ID of the contact to update
          schema:
            type: string
      requestBody:
        description: Contact data to update
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                phoneNumber:
                  type: string
                email:
                  type: string
                isFavourite:
                  type: boolean
                contactType:
                  type: string
                  enum:
                    - work
                    - home
                    - personal
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: Contact updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contact'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - contacts
      summary: Delete a contact by ID
      operationId: deleteContactById
      description: Delete a specific contact by its unique ID.
      security:
        - bearerAuth: []
      parameters:
        - name: contactId
          in: path
          required: true
          description: ID of the contact to delete
          schema:
            type: string
      responses:
        '204':
          description: Contact deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/responses-NotFound'
components:
  responses:
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 401
              message:
                type: string
                example: Unauthorized
    IllegalInput:
      description: Illegal input for operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Entity not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    responses-NotFound:
      description: Entity not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    RegisterUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: password123
    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: 60d0fe4f5311236168a109ca
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 404
        message:
          type: string
          example: Not Found
    LoginUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: password123
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    SendResetEmailRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
    SuccessResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: Success
    ResetPasswordRequest:
      type: object
      required:
        - token
        - password
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        password:
          type: string
          format: password
          example: newpassword123
    contact:
      type: object
      required:
        - name
        - phoneNumber
        - contactType
      properties:
        name:
          type: string
          example: John Doe
        phoneNumber:
          type: string
          example: '+1234567890'
        email:
          type: string
          example: john.doe@example.com
        isFavourite:
          type: boolean
          example: false
        contactType:
          type: string
          enum:
            - work
            - home
            - personal
        photo:
          type: string
          example: http://example.com/photo.jpg

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
